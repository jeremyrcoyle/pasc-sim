periods <- as.data.table(expand.grid(id=fake_study_tv_used$id, period=c(-1, 0)))
fake_study_tv_used <- merge(periods, fake_study_tv_used, by = "id")
study_tv_used <- rbind(fake_study_tv_used, fake_study_tv_used, study_tv_used)
study_tv_used_p1 <- copy(study_tv_used)
study_tv_used_p1[,period:=period+1]
setnames(study_tv_used_p1, tv_vars, sprintf("%s_t-1", tv_vars))
study_tv_used_p1
tv_nodes <- c("id", "period", "obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
study_tv_used <- study_tv[,tv_nodes, with = FALSE]
study_tv_used$period<-as.numeric(gsub("t_","",study_tv_used$period))
# add fake data for timepoints before zero
fake_study_tv_used <- study_tv_used[period==1]
tv_vars <-  c("obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
tv_vals <- c(0, 0, 0, 0, 0, 0, 0, -999, -999, 0, -999)
tv_mat <- matrix(tv_vals, nrow=nrow(fake_study_tv_used), ncol=length(tv_vals), byrow = TRUE)
tv_df <- as.data.frame(as.list(tv_vals))
names(tv_df) <- tv_vars
set(fake_study_tv_used, NULL, tv_vars, tv_df)
fake_study_tv_used$period <- NULL
periods <- as.data.table(expand.grid(id=fake_study_tv_used$id, period=c(-1, 0)))
fake_study_tv_used <- merge(periods, fake_study_tv_used, by = "id")
study_tv_used <- rbind(fake_study_tv_used, fake_study_tv_used, study_tv_used)
study_tv_used_p1 <- copy(study_tv_used)
study_tv_used_p1[,period:=period+1]
study_tv_used_p1
setnames(study_tv_used_p1, tv_vars, sprintf("%s_t-1", tv_vars))
study_tv_used_p1
study_tv_used_p2 <- copy(study_tv_used)
study_tv_used_p2[,period:=period+2]
setnames(study_tv_used_p2, tv_vars, sprintf("%s_t-2", tv_vars))
temp_final <- merge(study_tv_used, study_tv_used_p1, by=c("id","period"))
temp_final <- merge(temp_final, study_tv_used_p2, by=c("id","period"))
temp_final
temp_final <- merge(study_tv_used_p1, study_tv_used, by=c("id","period"))
temp_final <- merge(study_tv_used_p2, temp_final, by=c("id","period"))
temp_final
study_tv_used$period
table(study_tv_used$period))
table(study_tv_used$period)
# Use the long formatted data, which includes patients' history up till and including death
# don't model certain nodes
tv_nodes <- c("id", "period", "obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
study_tv_used <- study_tv[,tv_nodes, with = FALSE]
study_tv_used$period<-as.numeric(gsub("t_","",study_tv_used$period))
# add fake data for timepoints before zero
fake_study_tv_used <- study_tv_used[period==1]
tv_vars <-  c("obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
tv_vals <- c(0, 0, 0, 0, 0, 0, 0, -999, -999, 0, -999)
tv_mat <- matrix(tv_vals, nrow=nrow(fake_study_tv_used), ncol=length(tv_vals), byrow = TRUE)
tv_df <- as.data.frame(as.list(tv_vals))
names(tv_df) <- tv_vars
set(fake_study_tv_used, NULL, tv_vars, tv_df)
fake_study_tv_used$period <- NULL
periods <- as.data.table(expand.grid(id=fake_study_tv_used$id, period=c(-1, 0)))
fake_study_tv_used <- merge(periods, fake_study_tv_used, by = "id")
table(fake_study_tv_used$period)
study_tv_used <- rbind(fake_study_tv_used, fake_study_tv_used, study_tv_used)
study_tv_used_p1 <- copy(study_tv_used)
study_tv_used_p1[,period:=period+1]
setnames(study_tv_used_p1, tv_vars, sprintf("%s_t-1", tv_vars))
study_tv_used_p2 <- copy(study_tv_used)
study_tv_used_p2[,period:=period+2]
setnames(study_tv_used_p2, tv_vars, sprintf("%s_t-2", tv_vars))
temp_final <- merge(study_tv_used_p1, study_tv_used, by=c("id","period"))
temp_final <- merge(study_tv_used_p2, temp_final, by=c("id","period"))
table(temp_final$period)
table(study_tv_used$period)
tv_nodes <- c("id", "period", "obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
study_tv_used <- study_tv[,tv_nodes, with = FALSE]
study_tv_used$period<-as.numeric(gsub("t_","",study_tv_used$period))
# add fake data for timepoints before zero
fake_study_tv_used <- study_tv_used[period==1]
tv_vars <-  c("obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
tv_vals <- c(0, 0, 0, 0, 0, 0, 0, -999, -999, 0, -999)
tv_mat <- matrix(tv_vals, nrow=nrow(fake_study_tv_used), ncol=length(tv_vals), byrow = TRUE)
tv_df <- as.data.frame(as.list(tv_vals))
names(tv_df) <- tv_vars
set(fake_study_tv_used, NULL, tv_vars, tv_df)
fake_study_tv_used$period <- NULL
periods <- as.data.table(expand.grid(id=fake_study_tv_used$id, period=c(-1, 0)))
fake_study_tv_used <- merge(periods, fake_study_tv_used, by = "id")
study_tv_used <- rbind(fake_study_tv_used, study_tv_used)
study_tv_used_p1 <- copy(study_tv_used)
study_tv_used_p1[,period:=period+1]
setnames(study_tv_used_p1, tv_vars, sprintf("%s_t-1", tv_vars))
study_tv_used_p2 <- copy(study_tv_used)
study_tv_used_p2[,period:=period+2]
setnames(study_tv_used_p2, tv_vars, sprintf("%s_t-2", tv_vars))
temp_final <- merge(study_tv_used_p1, study_tv_used, by=c("id","period"))
temp_final <- merge(study_tv_used_p2, temp_final, by=c("id","period"))
temp_final
table(temp_final$period)
temp_final <- merge(baseline_data, temp_final, by="id")
##Repeated Data for non_jumping process
#First, get the baseline information
baseline_data<-final[,c("id",nodes$W), with=FALSE]
##Repeated Data for non_jumping process
#First, get the baseline information
baseline_data<-final[,c("id",nodes$W), with=FALSE]
temp_final <- merge(baseline_data, temp_final, by="id")
temp_final
learner <- Lrnr_glmnet$new()
document()
library(devtools)
document()
load_all()
learner <- Lrnr_glmnet$new()
constant <- temp_final[,lapply(.SD, function(x){length(unique(x)==1}), .SDcols = pred_nodes]
constant <- temp_final[,lapply(.SD, function(x){length(unique(x))==1}), .SDcols = pred_nodes]
pred_nodes <- c("obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death")
constant <- temp_final[,lapply(.SD, function(x){length(unique(x))==1}), .SDcols = pred_nodes]
constant
binary <- temp_final[,lapply(.SD, function(x){all(x%in%c(0,1))}), .SDcols = pred_nodes]
binary
counting <- temp_final[,lapply(.SD, function(x){all(diff(x)>0)}), .SDcols = pred_nodes, by = id]
counting
counting <- temp_final[,lapply(.SD, function(x){all(diff(x)>=0)}), .SDcols = pred_nodes, by = id]
counting
counting <- counting[,lapply(.SD, all), .SDcols = pred_nodes]
counting
counting <- unlist(counting[,lapply(.SD, all), .SDcols = pred_nodes])
counting
binary <- unlist(temp_final[,lapply(.SD, function(x){all(x%in%c(0,1))}), .SDcols = pred_nodes])
constant <- unlist(temp_final[,lapply(.SD, function(x){length(unique(x))==1}), .SDcols = pred_nodes])
counting = counting & binary
# counting = binary process that is increasing in time
counting <- temp_final[,lapply(.SD, function(x){all(diff(x)>=0)}), .SDcols = pred_nodes, by = id]
counting <- unlist(counting[,lapply(.SD, all), .SDcols = pred_nodes])
counting <- counting & binary
counting
pred_type <- rep(NA, length(pred_nodes))
pred_type[constant] <- "constant"
pred_type[counting & is.na(pred_type)] <- "counting"
pred_type[binary & is.na(pred_type)] <- "binary"
pred_type
if(!full){
visit_data<-temp_final%>%select(-c("id",
"covid.x", "vax.x", "metformin.x", "paxlovid.x", "pasc.x", "death.x",
"last_vax.x", "last_covid.x", "vax_count.x", "time_since_exposure.x",
"period.y","death.y",
"period","death","last_vax", "last_covid", "vax_count", "time_since_exposure"))
}
pred_data <- merge(study_tv_used_p1, study_tv_used, by=c("id","period"))
pred_data <- merge(study_tv_used_p2, pred_data, by=c("id","period"))
pred_data <- merge(baseline_data, pred_data, by="id")
# detect_node_types
pred_nodes <- c("obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death")
constant <- unlist(pred_data[,lapply(.SD, function(x){length(unique(x))==1}), .SDcols = pred_nodes])
binary <- unlist(pred_data[,lapply(.SD, function(x){all(x%in%c(0,1))}), .SDcols = pred_nodes])
# counting = binary process that is increasing in time
counting <- pred_data[,lapply(.SD, function(x){all(diff(x)>=0)}), .SDcols = pred_nodes, by = id]
counting <- unlist(counting[,lapply(.SD, all), .SDcols = pred_nodes])
counting <- counting & binary
pred_type <- rep(NA, length(pred_nodes))
pred_type[constant] <- "constant"
pred_type[counting & is.na(pred_type)] <- "counting"
pred_type[binary & is.na(pred_type)] <- "binary"
if(any(is.na(pred_type))){
stop("no supported pred_type detected")
}
Learner_mean$new()
Lrnr_mean$new()
learner <- Lrnr_mean$new()
col <- "obs_period"
col_index <- which(names(pred_data)=="col")
learner <- Lrnr_mean$new()
col <- "obs_period"
col_index <- which(names(pred_data)=="col")
col_index
col_index <- which(names(pred_data)==col)
col_index
pred_cols <- names(pred_data)[1:(col_index-1)]
pred_cols
pred_cols <- setdiff(pred_cols, "id")
pred_cols
task <- make_sl3_Task(pred_data, id = "id", covariates = pred_cols, outcome = col)
fit <- learner$train(task)
learner$predict()
fit$predict()
#' Fit a single column based on all previous columns, excluding id
fit_column <- function(pred_data, col, learner = NULL){
if(is.null(learner)){
learner <- Lrnr_mean$new()
}
col <- "obs_period"
col_index <- which(names(pred_data)==col)
pred_cols <- names(pred_data)[1:(col_index-1)]
pred_cols <- setdiff(pred_cols, "id")
task <- make_sl3_Task(pred_data, id = "id", covariates = pred_cols, outcome = col)
fit <- learner$train(task)
return(fit)
}
col <- "pasc"
counting = TRUE
last_zero <- pred_data[pasc==FALSE, max(period), by = "id"]
last_zero
period_seq <- function(period){seq(from=1, to = max(period) + 1)}
periods <- pred_data[pasc==FALSE, list(period = period_seq(period)), by = "id"]
periods
dim(pred_data)
table(pred_data$period)
period
table(pred_data$pasc)
table(pred_data$period, pred_data$pasc)
col_ned <- pred_data[,col, with = FALSE]==FALSE
col_neg <- pred_data[,col, with = FALSE]==FALSE
col_neg
periods <- pred_data[col_neg, list(period = period_seq(period)), by = "id"]
col_neg <- as.vector(pred_data[,col, with = FALSE]==FALSE)
periods <- pred_data[col_neg, list(period = period_seq(period)), by = "id"]
periods
dim(periods)
table(periods$period)
data <- generate_data(1e3, effect_size = 0.1)
final<-data$final
study_tv<-data$study_tv
full<-TRUE
nodes <- data$node_list
##Repeated Data for non_jumping process
#First, get the baseline information
baseline_data<-final[,c("id",nodes$W), with=FALSE]
# Use the long formatted data, which includes patients' history up till and including death
# don't model certain nodes
tv_nodes <- c("id", "period", "obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
study_tv_used <- study_tv[,tv_nodes, with = FALSE]
study_tv_used$period<-as.numeric(gsub("t_","",study_tv_used$period))
# add fake data for timepoints before zero
fake_study_tv_used <- study_tv_used[period==1]
tv_vars <-  c("obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
tv_vals <- c(0, 0, 0, 0, 0, 0, 0, -999, -999, 0, -999)
tv_mat <- matrix(tv_vals, nrow=nrow(fake_study_tv_used), ncol=length(tv_vals), byrow = TRUE)
tv_df <- as.data.frame(as.list(tv_vals))
names(tv_df) <- tv_vars
set(fake_study_tv_used, NULL, tv_vars, tv_df)
fake_study_tv_used$period <- NULL
periods <- as.data.table(expand.grid(id=fake_study_tv_used$id, period=c(-1, 0)))
fake_study_tv_used <- merge(periods, fake_study_tv_used, by = "id")
study_tv_used <- rbind(fake_study_tv_used, study_tv_used)
study_tv_used_p1 <- copy(study_tv_used)
study_tv_used_p1[,period:=period+1]
setnames(study_tv_used_p1, tv_vars, sprintf("%s_t-1", tv_vars))
study_tv_used_p2 <- copy(study_tv_used)
study_tv_used_p2[,period:=period+2]
setnames(study_tv_used_p2, tv_vars, sprintf("%s_t-2", tv_vars))
pred_data <- merge(study_tv_used_p1, study_tv_used, by=c("id","period"))
pred_data <- merge(study_tv_used_p2, pred_data, by=c("id","period"))
pred_data <- merge(baseline_data, pred_data, by="id")
#Get rid of the redundant time information and the death information (since not died)
#ALSO, make use of last time points "last_vax.y", "last_covid.y", "vax_count.y", "time_since_exposure.y",
learner <- Lrnr_glmnet$new()
# detect_node_types
pred_nodes <- c("obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death")
constant <- unlist(pred_data[,lapply(.SD, function(x){length(unique(x))==1}), .SDcols = pred_nodes])
binary <- unlist(pred_data[,lapply(.SD, function(x){all(x%in%c(0,1))}), .SDcols = pred_nodes])
# counting = binary process that is increasing in time
counting <- pred_data[,lapply(.SD, function(x){all(diff(x)>=0)}), .SDcols = pred_nodes, by = id]
counting <- unlist(counting[,lapply(.SD, all), .SDcols = pred_nodes])
counting <- counting & binary
pred_type <- rep(NA, length(pred_nodes))
pred_type[constant] <- "constant"
pred_type[counting & is.na(pred_type)] <- "counting"
pred_type[binary & is.na(pred_type)] <- "binary"
pred_type
period_seq <- function(period){seq(from=1, to = max(period) + 1)}
col_neg <- as.vector(pred_data[,col, with = FALSE]==FALSE)
periods <- pred_data[col_neg, list(period = period_seq(period)), by = "id"]
table(periods$period)
pred_final[periods]
pred_final <- pred_data[periods]
periods
pred_final <- merge(periods, pred_data, by = c("id", "period"))
pred_final
#' Fit a single column based on all previous columns, excluding id
fit_column <- function(pred_data, col, learner = NULL, counting = FALSE){
if(is.null(learner)){
learner <- Lrnr_mean$new()
}
if(counting){
period_seq <- function(period){seq(from=1, to = max(period) + 1)}
col_neg <- as.vector(pred_data[,col, with = FALSE]==FALSE)
periods <- pred_data[col_neg, list(period = period_seq(period)), by = "id"]
pred_final <- merge(periods, pred_data, by = c("id", "period"))
} else {
pred_final <- pred_data
}
col <- "obs_period"
col_index <- which(names(pred_data)==col)
pred_cols <- names(pred_data)[1:(col_index-1)]
pred_cols <- setdiff(pred_cols, "id")
task <- make_sl3_Task(pred_final, id = "id", covariates = pred_cols, outcome = col)
fit <- learner$train(task)
return(fit)
}
learner_list <- list(constant = make_learner(Lrnr_mean),
binary = make_learner(Lrnr_glmnet),
counting = make_learner(Lrnr_glmnet),)
learner_list <- list(constant = make_learner(Lrnr_mean),
binary = make_learner(Lrnr_glmnet),
counting = make_learner(Lrnr_glmnet))
pred_type <- pred_types[[pred_node]]
pred_types <- rep(NA, length(pred_nodes))
pred_types[constant] <- "constant"
pred_types[counting & is.na(pred_types)] <- "counting"
pred_types[binary & is.na(pred_types)] <- "binary"
if(any(is.na(pred_types))){
stop("no supported pred_type detected")
}
pred_node = "pasc"
pred_type <- pred_types[[pred_node]]
pred_type <- pred_types[pred_node]
pred_type
pred_node
pred_types
pred_type <- pred_types[pred_node==pred_nodes]
pred_type
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
debug_learner(learner_list$counting)
debug_train(learner_list$counting)
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
3
sl3_debug_mode()
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
task$X
args$x
debugonce(cv.glmnet)
y
table(y)
debugonce(fit_column)
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
table(pred_final$pasc)
debugonce(cv.glmnet)
table(y)
debugonce(fit_column)
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
col
load_all()
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
fit_column
rm(fit_column)
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
message(sprintf("Fitting column `%s` with %s", col, learner$name))
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
family
args$family
call_with_args(glmnet::cv.glmnet, args, other_valid = names(formals(glmnet::glmnet)),
ignore = "use_min")
fit_node <- function(pred_node){
pred_type <- pred_types[pred_node==pred_nodes]
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
}
fits <- lapply(pred_nodes, fit_node)
load_all()
fit_node <- function(pred_node){
pred_type <- pred_types[pred_node==pred_nodes]
fit_column(pred_data, pred_node, learner_list[[pred_type]], pred_type=="counting")
}
fits <- lapply(pred_nodes, fit_node)
dgp_estimate <- list(fit = fits,
baseline_covariates = baseline_covariates,
times <- unique(study_tv_used$period),
n = nrow(baseline_covariates))
dgp_estimate <- list(fit = fits,
baseline_data = baseline_data,
times <- unique(study_tv_used$period),
n = nrow(baseline_data))
load_all()
pred_data <- add_history(study_tv_used, baseline_data)
n <- dgp_estimate$n
baseline_data <- sample(dgp_estimate$baseline_data, n, replace = TRUE)
baseline_data[,id:=seq_len(n)]
tv_data <- data.table(id=baseline_data$id, period = 1)
tv_data
set(tv_data, NULL, tv_vars, NA)
tv_data
pred_data <- add_history(tv_data, baseline_data)
tv_data <- data.table(id=baseline_data$id, period = 1)
set(tv_data, NULL, tv_vars, NA_real_)
pred_data <- add_history(tv_data, baseline_data)
pred_data
names(pred_data)
baseline_data
dgp_estimate$baseline_data
baseline_data <- baseline_data[id%in%sample(dgp_estimate$baseline_data$id, n, replace = TRUE)]
baseline_obs <- dgp_estimate$baseline_data
baseline_data <- baseline_obs[id%in%sample(baseline_obsid, n, replace = TRUE)]
baseline_data <- baseline_obs[id%in%sample(baseline_obs$id, n, replace = TRUE)]
tv_data <- data.table(id=baseline_data$id, period = 1)
set(tv_data, NULL, tv_vars, NA_real_)
pred_data <- add_history(tv_data, baseline_data)
pred_data
period <- 1
periods <- dgp_estimate$``
periods <- dgp_estimate[[4]]
periods
names(dgp_estimate)[3]
names(dgp_estimate)[3] <- times
names(dgp_estimate)[3] <- "times"
str(dgp_estimate)
baseline_obs <- dgp_estimate$baseline_data
baseline_data <- baseline_obs[sample(baseline_obs$id, n, replace = TRUE)]
baseline_data[,id:=seq_len(n)]
table(pred_data$period)
# return results
dgp_estimate <- list(fit = fits,
baseline_data = baseline_data,
times = unique(pred_data$period),
n = nrow(baseline_data))
dgp_estimate$times
# add history covariates (lagged from last two timepoints)
pred_data <- add_history(study_tv_used, baseline_data)
# return results
dgp_estimate <- list(fit = fits,
baseline_data = baseline_data,
times = unique(pred_data$period),
n = nrow(baseline_data))
unique(pred_data$period)
baseline_obs <- dgp_estimate$baseline_data
baseline_data <- baseline_obs[sample(baseline_obs$id, n, replace = TRUE)]
baseline_data[,id:=seq_len(n)]
# TODO: make part of dgp_estimate output
tv_vars <-  c("obs_period", "covid", "vax", "metformin",
"paxlovid", "pasc", "death", "last_vax", "last_covid", "vax_count",
"time_since_exposure")
periods <- dgp_estimate
tv_data <- data.table(id=baseline_data$id, period = 1)
set(tv_data, NULL, tv_vars, NA_real_)
pred_data <- add_history(tv_data, baseline_data)
fit <- dgp_estimate$fit
fit
# return results
dgp_estimate <- list(fit = fits,
pred_names = pred_names,
pred_types = pred_types,
baseline_data = baseline_data,
times = unique(pred_data$period),
n = nrow(baseline_data))
# return results
dgp_estimate <- list(fit = fits,
pred_cols = pred_cols,
pred_types = pred_types,
baseline_data = baseline_data,
times = unique(pred_data$period),
n = nrow(baseline_data))
fit <- dgp_estimate$fit
periods <- dgp_estimate$times
tv_data <- data.table(id=baseline_data$id, period = 1)
tv_data <- data.table(id=baseline_data$id, period = 1)
set(tv_data, NULL, tv_vars, NA_real_)
pred_data <- add_history(tv_data, baseline_data)
fits <- dgp_estimate$fit
i <- 1
load_all()
pred_cols <- dgp_estimate$pred_cols
col <- pred_cols[i]
task <- column_task(pred_final, col)
load_all()
load_all()
task <- column_task(pred_final, col)
preds <- fit$predict(task)
str(fit)
fits <- dgp_estimate$fit
fit <- fits[[i]]
preds <- fit$predict(task)
pred_data <- add_history(tv_data, baseline_data)
task <- column_task(pred_data, col)
preds <- fit$predict(task)
names(pred_data)
debugonce(column_task)
col
pred_cols
# return results
dgp_estimate <- list(fit = fits,
pred_nodes = pred_nodes,
pred_types = pred_types,
baseline_data = baseline_data,
times = unique(pred_data$period),
n = nrow(baseline_data))
pred_nodes <- dgp_estimate$pred_nodes
load_all()
pred_data <- add_history(tv_data, baseline_data)
names(pred_data)
fit <- fits[[i]]
col <- pred_nodes[i]
task <- column_task(pred_data, col)
preds <- fit$predict(task)
col
debugonce(column_task)
task <- column_task(pred_data, col)
pred_cols
task <- column_task(pred_data, col)
data <- generate_data(1e3, effect_size = 0.1)
3
